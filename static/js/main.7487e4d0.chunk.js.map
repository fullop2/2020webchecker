{"version":3,"sources":["ScoreTable.js","App.js","serviceWorker.js","index.js"],"names":["ScoreTable","state","scores","prevProps","prevState","this","props","setState","titles","averages","medians","maxs","score_data","undefined","map","_","i","key","score","className","Table","title","average","median","max","Component","GoogleSpreadsheet","require","DataFrame","App","quizDataframe","reviewDataframe","studentID","consoleInput","React","createRef","onChange","bind","loader","documentDirection","type","context","a","doc","useServiceAccountAuth","loadInfo","sheet","sheetsByIndex","loadCells","row_loader","row_num","list","data","getCell","value","length","dataframe","current_scores","document","focus","console","log","params","URLSearchParams","window","location","search","quizURL","get","reviewURL","e","target","Container","Input","placeholder","ref","currentLine","id","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7487e4d0.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { Table } from 'reactstrap';\r\n\r\nclass ScoreTable extends Component{\r\n\r\n  state={\r\n    scores:[]\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState){\r\n    if(prevProps.scores !== this.props.scores){\r\n      this.setState({scores: this.props.scores});\r\n    }\r\n  }\r\n\r\n  render(){\r\n\r\n    const { titles, averages, medians, maxs } = this.props;\r\n\r\n    let score_data = [];\r\n\r\n    if(this.state.scores===undefined){\r\n      score_data = titles.map((_,i)=>{return (<td key={i}></td>);});\r\n    }\r\n    else{\r\n      score_data = this.state.scores.map((score,i)=>{return (<td key={i}>{score}</td>);});\r\n    }\r\n\r\n    return (\r\n      <div className='table-responsive'>\r\n        <Table>\r\n          <thead>\r\n            <tr className=\"table-active\">\r\n              <th>일자</th>\r\n            {titles.map((title,i)=>{return (<th key={i}>{title}</th>);})}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <th>점수</th>{score_data}\r\n            </tr>\r\n          </tbody>\r\n          <tfoot>\r\n            <tr className=\"table-light\">\r\n              <th>평균</th>\r\n              {averages.map((average,i)=>{return (<td key={i}>{average}</td>);})}\r\n            </tr>\r\n            <tr className=\"table-light\">\r\n              <th>중앙값</th>\r\n              {medians.map((median,i)=>{return (<td key={i}>{median}</td>);})}\r\n            </tr>\r\n            <tr className=\"table-light\">\r\n              <th>만점</th>\r\n              {maxs.map((max,i)=>{return (<td key={i}>{max}</td>);})}\r\n            </tr>\r\n          </tfoot>\r\n        </Table>\r\n      </div>\r\n\r\n    )\r\n  }\r\n};\r\n\r\nexport default ScoreTable;\r\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { Input, Container } from 'reactstrap';\nimport './App.css';\nimport ScoreTable from './ScoreTable.js';\n\n\nconst {GoogleSpreadsheet } = require('google-spreadsheet');\n\nclass DataFrame{\n  scores={};\n  titles=[];\n  averages=[];\n  medians=[];\n  maxs=[];\n}\n\n\nclass App extends React.Component {\n\n  state={\n      quizDataframe : new DataFrame(),\n      reviewDataframe : new DataFrame(),\n      studentID : \"\"\n  }\n\n  constructor(props){\n    super(props);\n    this.consoleInput = React.createRef();\n    this.onChange = this.onChange.bind(this);\n  }\n\n  componentDidMount(){\n    document.title = \"점수 확인\";\n    this.consoleInput.focus();\n\n    async function loader(documentDirection,type,context){\n      const doc = await new GoogleSpreadsheet (documentDirection);\n      await doc.useServiceAccountAuth(require('./quickstart-1599744608145-251f214d4b6c.json'));\n      await doc.loadInfo();\n      const sheet = doc.sheetsByIndex[0];\n\n      await sheet.loadCells('B7:S52');\n\n      const row_loader = row_num=>{\n        let list = [];\n        let data = '';\n        let i = 3;\n        for(; (data = sheet.getCell(row_num,i).value) !== null; i++){\n          list = [...list, data];\n        }\n\n        if(i < 17){\n          if(list.length === 0){\n            list = [''];\n          }\n          list = [... list, sheet.getCell(row_num,17).value];\n        }\n\n        return list;\n      };\n\n      let dataframe = new DataFrame();\n\n      dataframe.titles = row_loader(7);\n\n      for(let row_num = 8; row_num < 50; row_num++){\n\n        const studentID = sheet.getCell(row_num,1).value;\n        if(studentID === null) break;\n\n        const current_scores = row_loader(row_num);\n        dataframe.scores[studentID] = current_scores;\n      }\n      dataframe.averages = row_loader(45);\n      dataframe.medians = row_loader(46);\n      dataframe.maxs = row_loader(47);\n\n      if(type==='quiz')\n        context.setState({quizDataframe: dataframe});\n      else if(type === 'review')\n        context.setState({reviewDataframe: dataframe});\n    }\n    console.log(this.props);\n    const params = new URLSearchParams(window.location.search);\n    const quizURL = params.get('quiz');\n    const reviewURL = params.get('review');\n    //'1ZKTJtiC2Kd8g_2PoEHRSDSJG3GjxrGuS2A5ceMYMprI'\n    loader(quizURL,'quiz',this);\n    //'19bfYAA6ZFV7C2lvF2hsui6hbwX-2ZsT2lApVEJeZJHg'\n    loader(reviewURL,'review',this);\n  }\n\n  onChange(e){\n    this.setState({studentID : e.target.value});\n  }\n\n  render(){\n    return (\n      <Container>\n        <div><h1 className=\"text-center\">퀴즈 복습 점수</h1></div>\n        <Input\n            type=\"number\"\n            placeholder='type your student ID here'\n            ref={e=>{this.consoleInput = e;}}\n            value={this.state.currentLine}\n            onChange={this.onChange}\n            id=\"studentID\"/>\n        <div><h2 className='pl-4 pt-4'>퀴즈 점수</h2></div>\n          <ScoreTable\n            titles={this.state.quizDataframe.titles}\n            scores={this.state.quizDataframe.scores[this.state.studentID]}\n            averages={this.state.quizDataframe.averages}\n            medians={this.state.quizDataframe.medians}\n            maxs={this.state.quizDataframe.maxs}/>\n        <div><h2 className='pl-4 pt-4'>복습 점수</h2></div>\n          <ScoreTable\n            titles={this.state.reviewDataframe.titles}\n            scores={this.state.reviewDataframe.scores[this.state.studentID]}\n            averages={this.state.reviewDataframe.averages}\n            medians={this.state.reviewDataframe.medians}\n            maxs={this.state.reviewDataframe.maxs}/>\n        <div  className='text-center pt-3'>\n          <p>채점 사항에 대한 문의는 튜터에게 해주세요</p>\n        </div>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}